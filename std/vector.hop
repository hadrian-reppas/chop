import std::prelude::{swap rot}
import std::ptr::{assert_non_null}

struct Vector[T] {
    pointer: *T
    length: int
    capacity: int
}

fn new_vector[T] -> Vector[T] {
    0 cast_to[*T] 0 0 Vector
}

fn new[T] -> Vector[T] {
    new_vector[T] call
}

fn push[T] let vec: *Vector[T] value: T {
    vec .length read vec .capacity read
    if == {
        vec realloc_vector
    }
    vec .pointer read vec .length read + value write
    vec .length . read 1 + write
}

fn get[T] let vec: *Vector[T] i: int -> T {
    0 i <= assert
    i vec .length read < assert
    vec .pointer read i + read
}

fn set[T] let vec: *Vector[T] i: int val: T {
    0 i <= assert
    i vec .length read < assert
    vec .pointer read i + val write
}

fn pop[T] *Vector[T] -> T {
    ..length read 0 > assert
    ..length . read 1 - write
    ..length read swap .pointer read + read
}

fn free[T] Vector[T] {
    if ..capacity 0 > {
        .pointer free
    } else {
        ~
    }
}

fn free_with[T] Vector[T] fn(T) {
    ~ ~ abort
}

fn realloc_vector[T] let vec: *Vector[T] {
    if vec .capacity read 0 == {
        vec ..capacity 10 write
        .pointer 10 alloc_arr[T] assert_non_null write
    } else {
        vec .capacity read 2 *
        let new_capacity {
            vec .pointer read new_capacity realloc
            assert_non_null
            vec .pointer swap write
            vec .capacity new_capacity write
        }
    }
}

fn len[T] *Vector[T] -> int {
    .length read
}

fn is_empty[T] *Vector[T] -> bool {
    .length read 0 ==
}
