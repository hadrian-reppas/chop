import struct std::vector::{Vector}
import std::vector::{new_vector len push pop free .pointer}

struct String {
    bytes: Vector[byte]
}

fn new_string -> String {
    new_vector[byte] call
    @ b'\0' push
    String
}

fn new -> String {
    new_string
}

fn push *String int {
    if . 128 < {
        to_byte push_one
    } else if . 2048 < {
        two_bytes push_two
    } else if . 65536 < {
        three_bytes push_three
    } else {
        four_bytes push_four
    }
}

fn push *String *byte {
    ~ ~ abort // TODO
}

fn push_one let str: *String b: byte {
    str .bytes
    let bytes {
        bytes pop ~
        bytes b push
        bytes b'\0' push
    }
}

fn push_two let str: *String b1: byte b2: byte {
    str .bytes
    let bytes {
        bytes pop ~
        bytes b1 push
        bytes b2 push
        bytes b'\0' push
    }
}

fn push_three let str: *String b1: byte b2: byte b3: byte {
    str .bytes
    let bytes {
        bytes pop ~
        bytes b1 push
        bytes b2 push
        bytes b3 push
        bytes b'\0' push
    }
}

fn push_four let str: *String b1: byte b2: byte b3: byte b4: byte {
    str .bytes
    let bytes {
        bytes pop ~
        bytes b1 push
        bytes b2 push
        bytes b3 push
        bytes b4 push
        bytes b'\0' push
    }
}

fn two_bytes let c: int -> byte byte {
    c 6 >> 31 & 192 | to_byte
    c 63 & 128 | to_byte
}

fn three_bytes let c: int -> byte byte byte {
    c 12 >> 15 & 224 | to_byte
    c 6 >> 63 & 128 | to_byte
    c 63 & 128 | to_byte
}

fn four_bytes let c: int -> byte byte byte byte {
    c 18 >> 7 & 240 | to_byte
    c 12 >> 63 & 128 | to_byte
    c 6 >> 63 & 128 | to_byte
    c 63 & 128 | to_byte
}

fn put *String {
    .bytes .pointer read puts
}

fn putln *String {
    put ln
}

fn len *String -> int {
    .bytes len
}

fn free String {
    .bytes free
}

fn pointer *String -> *byte {
    .bytes .pointer read
}
