import std : prelude

global count: int { 0 }
global flag: bool
global my_pair: pair[int byte] { 0 cast_to[*int] 0 cast_to[*byte] pair }

struct pair [T U] {
    fst: *T
    snd: *U
}

struct single [T] {
    value: T
}

fn alloc_test int -> ***int {

    alloc_arr[pair[int byte]] ~

    zalloc[int] * 0 == assert
    5 zalloc_arr[byte] 2 + * 0 to_byte == assert

    alloc[**int]
}

fn cast_to_int_ptr_ptr[T] *T -> **int {
    cast_to[**int]
}

fn cast_to_byte_ptr_ptr *byte -> **byte {
    cast_to[**byte]
}

fn test_if {
    if 1 ~ true {
        1
    } else if false {
        2
    } else {
        3 4
        let three four {
            four
        }
    }
    put
}

fn test_while {
    1 2 3 
    while true { ~ 2 }
    while ~ 1 false { ! ! }
    ~ ~ ~
}

fn test_abort {
    abort
}

fn member_test {
    alloc[int] alloc[byte] pair DEBUG_STACK
    .fst DEBUG_STACK ~
}

fn test_for -> float float {
    1.0 2.0
    for 1 to 10 {
        let a b _ {
            b a
        }
    }
}

fn size_of_test[T] T -> int {
    ~ size_of[T]
}

fn main -> int {
    "hello" putlns

    test test
    let a b {
        (a + -b)
    }
    putln

    1 2 + 3 == assert

    0
}

struct test {}

fn + test int -> int {
    ~ ~ 1
}

fn neg test -> int {
   ~ 1
}

fn f int -> int {}
fn f bool -> bool {}
